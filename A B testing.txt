What is A/B testing?
 
A/B testing is an application of a kind of statistics called hypothesis testing. The idea is that you start with a hypothesis like a new improvement to a website will cause 
some metrics to increase. Typically, this metric is tied directly to some business metrics like revenue or could simply be related to engagement where we are trying to see
if the new UI is more effective than the older one. So, we can prove or disprove a hypothesis about how user behavior changed. By looking at multiple metrics, we can interpret
the results holistically to gain insight into the effects of the change.

Below are some important steps followed during A/B testing-
1. Customers need to meet the eligibility criteria for example they should be registered users or have made at least one purchase in past.
2. A diversion point will be created which will be deciding whether they would be put in the control or treatment group. The Control group is where nothing is changed for the 
customers and the treatment group is where customers will be shown the new variant.
3. Their activity is monitored and a null hypothesis is adopted that states the new variant does not significantly change the user behavior, so the problem boils down to 
the one in hypothesis testing where we reject or fail to reject the null hypothesis.

Some popular A/B testing case studies-

A. User welcome email

1. Old variant- Send standard welcome email
2. New variant - Send welcome email with a picture of top-selling products
3. Eligibility - User must have an account
4. Diversion Point - When the automated email is about to be sent
5. Control group gets existing email and treatment group gets updated email
6. Engagement metrics - email opens -> email clicks -> item views -> order completed
7. Business metrics - total orders placed, revenue

B. Push notification to mobile users

1. Old variant - No push notifications
2. New variant - Push notifications about items in the cart and not completed the order in the past 24 hours
3. Eligibility - The user must have an account with the valid email address
4. Diversion Point - When an automated push notification is about to be sent
5. Control group gets no push notifications and the treatment group gets personalized push notifications about items in the cart
6. Engagement metrics - push notification recieved -> mobile app visit -> item views - > order completed
7. Business metrics - total orders placed, revenue


SQL queries-

1. Find out the total people who participated in A/B testing?

SELECT COUNT(DISTINCT user_id)
FROM dsv1069.events
WHERE event_name = 'test_assignment';

count
97292


2. How many A/B tests have run?

SELECT parameter_value
FROM dsv1069.events
WHERE event_name = 'test_assignment' AND
parameter_name = 'test_id'
GROUP BY parameter_value;

test_id
4
5
6
7

Four A/B tests have run.

3. On each day, how many people participate in any given A/B tests?

SELECT parameter_value AS test_id,
       DATE(event_time) AS day,
       COUNT(*) AS event_rows
FROM dsv1069.events
WHERE event_name = 'test_assignment'
  AND parameter_name = 'test_id'
GROUP BY parameter_value,
         DATE(event_time)
ORDER BY day
limit 10;

test_id		     day		              event_rows
4	     2013-05-25 00:00:00	       		1128
4	     2013-05-26 00:00:00	       		1023
4	     2013-05-27 00:00:00	       		1088
4	     2013-05-28 00:00:00	       		1114
4	     2013-05-29 00:00:00	       		1067
4	     2013-05-30 00:00:00	       		1072
4	     2013-05-31 00:00:00	       		1083
4	     2013-06-01 00:00:00	       		1116
4	     2013-06-02 00:00:00  	     		1073
4	     2013-06-03 00:00:00  	     		1070

4. Finding out the start and end dates of the A/B tests and see if any of them coincide?

SELECT test_id,
      min(day) AS event_started,
      max(day) AS event_ended,
      SUM(event_rows) AS total_participation
FROM
(SELECT parameter_value AS test_id,
       DATE(event_time) AS day,
       COUNT(*) AS event_rows
FROM dsv1069.events
WHERE event_name = 'test_assignment'
  AND parameter_name = 'test_id'
GROUP BY parameter_value,
         DATE(event_time)
ORDER BY day) AS running_tests
GROUP BY test_id
ORDER BY event_started ASC;

test_id	    event_started		            event_ended	       total_participation
4	      2013-05-25 00:00:00	       2013-06-04 00:00:00	        11890
5	      2013-09-02 00:00:00	       2014-05-21 00:00:00	        68563
6	      2014-03-31 00:00:00	       2014-06-29 00:00:00	        43390
7	      2016-09-16 00:00:00	       2016-12-04 00:00:00	        38647

only tests 5,6 coincide whereas tests 4 and 7 run individually

Structuring multiple concurrent A/B tests - The only requirement is that the tests should be independent of one another, which means the effect on behaviour a test could have
on a customer should not affect their behaviour on another A/B test.


5. Compressing the information in events table to include test_id and test assignment in the same row.

SELECT event_id,
       event_time,
       user_id,
       platform,
       MAX(CASE
               WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
               ELSE NULL
           END) AS test_id,
       MAX(CASE
               WHEN parameter_name = 'test_assignment' THEN parameter_value
               ELSE NULL
           END) AS test_assignment
FROM dsv1069.events
WHERE event_name = 'test_assignment'
GROUP BY event_id,
         event_time,
         user_id,
         platform
ORDER BY event_id
limit 10;

event_id				      event_time	user_id	  	platform		test_id		test_assignment
00003d71b9cb41469c05af608a6d2145	2014-04-28 15:23:00	147689	  	  server		  5	              1
00012e89e2f54bf99180dde02c63e4ad	2016-11-06 15:23:09	225112	  	  server		  7	              1
00012e8f6da84f33ab9ff53901f5a2f3	2014-04-10 15:23:05	130289	  	  server		  6	              1
00018d8326b64ce7b016b90282b0d81e	2014-05-13 15:23:05	86365	  	  server		  6	              0
0001abcf9b824630856a246877a6ef4b	2013-10-19 15:23:00	51995	  	  server		  5	              1
00023fa0f29e4aa5b5d566cd65dadb4a	2013-10-25 15:23:00	177068	  	  server		  5	              1
00030a7b59e542298ece94b022d7e177	2014-04-18 15:23:05	52199	  	  server		  6	              1
000349ab83b147bdaf444815e030f172	2014-05-22 15:23:05	190289	  	  server		  6	              1
00039923fa2944efabf2b595f3a4b092	2014-05-24 15:23:05	212158	  	  server		  6	              1
0003cf55eeaf43c59365366a12e66a57	2016-09-23 15:23:09	267952	  	  server		  7	              0
       

6. Since tests 5 and 6 are coinciding, check whether any user is part of the treatment group for both tests, if yes then how many?

SELECT user_id,
       COUNT(test_assignment) AS assignments
FROM
  (SELECT event_id,
          event_time,
          user_id,
          platform,
          MAX(CASE
                  WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                  ELSE NULL
              END) AS test_id,
          MAX(CASE
                  WHEN parameter_name = 'test_assignment' THEN parameter_value
                  ELSE NULL
              END) AS test_assignment
  FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id,
            platform
   ORDER BY event_id) test_events
WHERE test_assignment = '1' and (test_id = 5 OR test_id = 6)
GROUP BY user_id
ORDER BY assignments DESC
limit 10;

user_id		assignments
21809	       	   2
22055	       	   2
21702	       	   2
21803	       	   2
21859	       	   2
21868	       	   2
21085	       	   2
21673	       	   2
21710	       	   2
22065	       	   2

SELECT assignments,COUNT(*) 
FROM
(SELECT user_id,
       COUNT(test_assignment) AS assignments
FROM
  (SELECT event_id,
          event_time,
          user_id,
          platform,
          MAX(CASE
                  WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                  ELSE NULL
              END) AS test_id,
          MAX(CASE
                  WHEN parameter_name = 'test_assignment' THEN parameter_value
                  ELSE NULL
              END) AS test_assignment
  FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id,
            platform
   ORDER BY event_id) test_events
WHERE test_assignment = '1' and (test_id = 5 OR test_id = 6)
GROUP BY user_id) as user_with_assignments
GROUP BY assignments;

assignments	 	   count
1		          43086
2		          6380

7. Finding out how many users participated in each A/B test as part of control and treatment group

SELECT test_id,
       test_assignment,
       COUNT(DISTINCT user_id)
FROM
 (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
GROUP BY test_id,
test_assignment 

test_id		test_assignment	 	    count
4	          0	          	    7210
4	          1	          	    4680
5	          0	          	    34420
5	          1	          	    34143
6	          0	          	    21687
6	          1	          	    21703
7	          0	          	    19376
7	          1	          	    19271
		                            69565
                         
The last row shows the total number of users who did not participate in any of the A/B tests.

8. Compute a metric that measures whether a user created an order after their test assignment

SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       MAX(CASE
               WHEN orders.created_at > test_events.event_time THEN 1
               ELSE 0
           END) AS orders_after_assignment_binary
FROM
  ( SELECT event_id,
           event_time,
           user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id
limit 15;

test_id		test_assignment		user_id		orders_after_assignment_binary
6		       1		193270			1
6		       0		78468			0
5		       1		186989			0
5		       1		243459			0
7		       0		191680			0
5		       0		52717			0
5		       0		167261			1
7		       0		219682			0
7		       0		275208			0
6		       1		196521			0
4		       0		34611			1
7		       1		208839			1
6		       1		165912			0
7		       0		262305			0
5		       1		215646			1
           	
9. Creating a new item view user_level binary metric.

SELECT assignments.user_id,
       assignments.test_id,
       assignments.test_assignment,
       MAX(CASE
                  WHEN views.event_time > assignments.event_time THEN 1
                  ELSE 0
              END) AS user_views_binary,
       MAX(CASE
                  WHEN (views.event_time > assignments.event_time
                        AND DATE_PART('day', views.event_time - assignments.event_time) <= 30) THEN 1
                  ELSE 0
              END) AS user_views_binary_30d
FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
LEFT OUTER JOIN
     (SELECT event_time,
      user_id,
      parameter_value
      FROM dsv1069.events
      WHERE event_name = 'view_item' AND 
          parameter_name = 'item_id'
          ) views
      ON assignments.user_id = views.user_id
      GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment 
      HAVING assignments.test_id IS NOT NULL
ORDER BY user_views_binary_30d DESC
LIMIT 10;

user_id	    test_id		test_assignment			user_views_binary		user_views_binary_30d
160582	      7	        	   1	             		 1	                	  1
22868	      5	        	   0	             		 1                  		  1
158836	      7	        	   0              		 1                  		  1
157135	      7         	   1	             		 1	                	  1
20315	      5	        	   1	             		 1	                	  1
167321	      7	        	   0	             		 1	                	  1
163221	      7	        	   0	             		 1	                	  1
22676	      6	        	   0	             		 1	                	  1
165351        7	        	   0	             		 1	                	  1
25454	      6	        	   1	             		 1	                	  1
	
             
10. Extending the same analysis from above but now doing it for all treatment groups as whole instead of user_level

SELECT user_level.test_id,
       user_level.test_assignment,
       SUM(user_views) AS total_user_views,
       SUM(views_binary_30d) AS total_user_views_within_30_days
FROM
(SELECT assignments.user_id,
       assignments.test_id,
       assignments.test_assignment,
       MAX(CASE
                  WHEN views.event_time > assignments.event_time THEN 1
                  ELSE 0
              END) AS user_views,
       MAX(CASE
                  WHEN (views.event_time > assignments.event_time
                        AND DATE_PART('day', views.event_time - assignments.event_time) <= 30) THEN 1
                  ELSE 0
              END) AS views_binary_30d
FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
LEFT OUTER JOIN
     (SELECT event_time,
      user_id,
      parameter_value
      FROM dsv1069.events
      WHERE event_name = 'view_item' AND 
          parameter_name = 'item_id'
          ) views
      ON assignments.user_id = views.user_id
      GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment 
      HAVING assignments.test_id IS NOT NULL) user_level
GROUP BY user_level.test_id,
         user_level.test_assignment;
         
test_id		test_assignment	 	total_user_views	  total_user_views_within_30_days
4		        0	           4225	                   1
4		        1	           2709	                   2
5		        0	           19666                   186
5		        1	           19781                   177
6		        0	           12511                   74
6		        1	           12546                   74
7		        0	           10290                   245
7		        1	           10271                   237
           

11.  Making a user_level metrics with the following-
-- the number of orders/invoices
-- the total revenue from the order after treatment

SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       MAX((CASE
                           WHEN orders.created_at > test_events.event_time THEN 1
                           ELSE 0
                       END)) AS order_after_assignment,
       SUM((CASE
                WHEN orders.created_at > test_events.event_time THEN price
                ELSE 0
            END)) AS total_revenue
FROM
  (SELECT event_id,
          event_time,
          user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id
ORDER BY total_revenue DESC
limit 10;


test_id		test_assignment		user_id		order_after_assignment			total_revenue
5	            0	         	166460	        	1	               		 4027.5
6	            1	         	166460	        	1	               		 4027.5
5	            1	         	201255	        	1	               		 3675
6	            0	         	201255	        	1	               		 3675
7	            1	         	201255	        	1	               		 3675
7	            1	         	226790	        	1	               		 3637.665
6	            0	         	226790	        	1	               		 3637.665
5	            1	         	226790	        	1	               		 3637.665
5	            1	         	81386	        	1	               		 3534
5	            0	         	117506	        	1	               		 3306
                
12. Extending the same analysis from above but now doing it for all treatment groups as whole instead of user_level

SELECT user_level.test_id,
      user_level.test_assignment,
      COUNT(DISTINCT user_level.user_id) AS no_of_users,
      SUM(user_level.orders_after_assignment) AS total_users_who_ordered,
      SUM(user_level.total_revenue) AS total_revenue
FROM
(SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       MAX(CASE
                           WHEN orders.created_at > test_events.event_time THEN 1
                           ELSE 0
                       END) AS orders_after_assignment,
       SUM((CASE
                WHEN orders.created_at > test_events.event_time THEN price
                ELSE 0
            END)) AS total_revenue
FROM
  (SELECT event_id,
          event_time,
          user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id) AS user_level
GROUP BY user_level.test_id,
         user_level.test_assignment;
         
test_id	  test_assignment	   no_of_users	   total_users_who_ordered	  total_revenue
  4	            0	             7210	         1060	                   317624.2250000002
  4	            1	             4680	         670	                    185803.2999999999
  5	            0	             34420	        4977	                   1406593.229999996
  5	            1	             34143	        5075	                   1415427.9999999912
  6	            0	             21687	        3164	                   887280.655
  6	            1	             21703	        3190	                   879542.6049999989
  7	            0	             19376	        2521	                   701942.2349999995
  7	            1	             19271	        2633	                   726171.0050000008


13. Conducting A/B tests on total number of users who ordered as 'business metrics' and finding out if the new variant creates any statistically significant results.
-Confidence level is taken as 95%
-Null hypothesis states that there is no significant statistical difference between the control and treatment group behaviour.
-A/B testing calculator used can be found on below link-
https://thumbtack.github.io/abba/demo/abba.html

A. For Test id 4, 
Control group - 1060 success out of 7210 users
Treatment group - 670 success out of 4680 users
the p value comes out to be 0.56 > 0.05, hence we fail to reject the null hypothesis and hence can not confidently say if the variant introduced caused any significant changes

B. For Test id 5, 
Control group - 4977 success out of 34420 users
Treatment group - 5075 success out of 33800 users
the p value comes out to be 0.041 < 0.05, hence we reject the null hypothesis and hence can confidently say if the variant introduced caused any significant changes

C. For Test id 6, 
Control group - 3164 success out of 21687 users
Treatment group - 3190 success out of 21703 users
the p value comes out to be 0.75 > 0.05, hence we fail to reject the null hypothesis and hence can not confidently say if the variant introduced caused any significant changes

D. For Test id 7, 
Control group - 2521 success out of 19376 users
Treatment group - 2633 success out of 19150 users
the p value comes out to be 0.033 < 0.05, hence we reject the null hypothesis and hence can confidently say the variant introduced caused any significant changes
